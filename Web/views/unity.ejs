<!DOCTYPE html>
<html lang="en-us">
  <head>
    <meta charset="utf-8" />
    <meta http-equiv="Content-Type" content="text/html; charset=utf-8" />
    <title>Unity WebGL Player</title>
  </head>
  <body>
    <div id="unity-container">
      <canvas id="unity-canvas"></canvas>
    </div>
    <style>
      body {
        margin: 0px;
      }
      /* Adjust the size of the Unity container */
      #unity-container {
        height: 600px;
        overflow: hidden;
      }

      /* Adjust the size of the Unity canvas */
      #unity-canvas {
        width: 100%;
        height: 100%;
        display: block; /* Ensures the canvas expands to fill its container */
      }
    </style>
    <script>
      // Ensure the UnityInstance object is available globally
      var UnityInstance;

      // Function to initialize Unity
      function initializeUnity() {
        var canvas = document.querySelector("#unity-canvas");
        var buildUrl = "/animation/Build";
        var loaderUrl = buildUrl + "/webgl.loader.js";
        var config = {
          dataUrl: buildUrl + "/webgl.data",
          frameworkUrl: buildUrl + "/webgl.framework.js",
          codeUrl: buildUrl + "/webgl.wasm",
          streamingAssetsUrl: "StreamingAssets",
          companyName: "signlang",
          productName: "signlang",
          productVersion: "1.0",
        };

        // Load the loader script
        var script = document.createElement("script");
        script.src = loaderUrl;
        script.onload = () => {
          createUnityInstance(canvas, config, (progress) => {
            console.log(`Loading progress: ${progress * 100}%`);
          })
            .then((unityInstance) => {
              UnityInstance = unityInstance;

              // Add message event listener to receive messages from the parent window
              window.addEventListener("message", (event) => {
                var message = event.data;

                if (message === "START_RECORDING") {
                  UnityInstance.Quit().then(function () {
                    console.log("Unity quit successfully");
                    UnityInstance = null;
                  });
                } else if (typeof message === "string") {
                  // Define the mapping for words to animation codes and durations
                  const wordMapping = {
                    and: { code: "1", synonyms: ["و", "also", "as well as"] },
                    milk: { code: "2", synonyms: ["حليب", "لبن"] },
                    me: {
                      code: "3",
                      synonyms: ["انا", "mee", "myself"],
                    },
                    hello: {
                      code: "4",
                      synonyms: ["اهلا", "مرحبا", "greetings", "hi"],
                    },
                    "your health is fine": {
                      code: "5",
                      synonyms: [
                        "صحتك بخير",
                        "انت كويس",
                        "you're healthy",
                        "in good health",
                      ],
                    },
                    drink: {
                      code: "6",
                      synonyms: ["اشرب", "بشرب", "يشرب", "beverage", "consume"],
                    },
                    train: {
                      code: "7",
                      synonyms: ["قطار", "locomotive", "rail"],
                    },
                    before: {
                      code: "8",
                      synonyms: ["قبل", "prior to", "earlier"],
                    },
                    "he will come": {
                      code: "9",
                      synonyms: [
                        "هو سياتي",
                        "هو جي",
                        "سياتي",
                        "he's coming",
                        "he'll arrive",
                      ],
                    },
                    fast: {
                      code: "10",
                      synonyms: ["سريع", "quick", "speedy", "rapid"],
                    },
                    together: {
                      code: "11",
                      synonyms: ["معا", "with", "along"],
                    },
                    "train station": {
                      code: "12",
                      synonyms: [
                        "محطة فطار",
                        "railway station",
                        "train terminal",
                      ],
                    },
                    late: {
                      code: "13",
                      synonyms: ["متاخر", "tardy", "delayed"],
                    },
                    delay: {
                      code: "14",
                      synonyms: ["تاخير", "postpone", "defer"],
                    },
                    when: { code: "15", synonyms: ["متى", "at what time"] },
                    after: {
                      code: "16",
                      synonyms: ["بعد", "following", "subsequent to"],
                    },
                    where: { code: "17", synonyms: ["اين", "in what place"] },
                    place: {
                      code: "18",
                      synonyms: ["مكان", "location", "spot"],
                    },
                    hour: { code: "19", synonyms: ["ساعة", "time"] },
                    "I go": { code: "20", synonyms: ["انا اذهب", "I leave"] },
                    discount: {
                      code: "21",
                      synonyms: ["خصم", "reduction", "deduction"],
                    },
                    fracture: {
                      code: "22",
                      synonyms: ["كسر", "break", "crack"],
                    },
                    diarrhea: {
                      code: "23",
                      synonyms: ["اسهال", "loose motion"],
                    },
                    corona: { code: "24", synonyms: ["فيروس كورونا", "covid"] },
                    feed: {
                      code: "25",
                      synonyms: ["تغذية", "nourish", "supply"],
                    },
                    mask: { code: "26", synonyms: ["قناع", "face covering"] },
                    forbidden: {
                      code: "27",
                      synonyms: ["ممنوع", "prohibited", "banned"],
                    },
                    canula: { code: "28", synonyms: ["قسطرة", "tube"] },
                    congestion: {
                      code: "29",
                      synonyms: ["ازدحام", "blockage"],
                    },
                    birth: { code: "30", synonyms: ["ولادة", "nativity"] },
                    cotton: { code: "31", synonyms: ["قطن", "fabric"] },
                    ticket: { code: "32", synonyms: ["تذكرة", "pass"] },
                    analysis: {
                      code: "33",
                      synonyms: ["تحليل", "examination"],
                    },
                    pregnancy: { code: "34", synonyms: ["حمل", "gestation"] },
                    tired: {
                      code: "35",
                      synonyms: ["متعب", "weary", "fatigued"],
                    },
                    address: {
                      code: "36",
                      synonyms: ["عنوان", "location", "place"],
                    },
                    bank: {
                      code: "37",
                      synonyms: ["بنك", "financial institution"],
                    },
                    "bank manager": {
                      code: "38",
                      synonyms: ["مدير البنك", "bank director"],
                    },
                    because: {
                      code: "39",
                      synonyms: ["لان", "due to", "since"],
                    },
                    deaf: { code: "40", synonyms: ["اصم", "hearing impaired"] },
                    finance: { code: "41", synonyms: ["تمويل", "funding"] },
                    "financial benefits": {
                      code: "42",
                      synonyms: ["مزايا مالية", "financial perks"],
                    },
                    form: { code: "43", synonyms: ["نموذج", "template"] },
                    governorate: {
                      code: "44",
                      synonyms: ["محافظة", "province"],
                    },
                    money: {
                      code: "45",
                      synonyms: ["فلوس", "مال", "cash", "funds"],
                    },
                    "money payment": {
                      code: "46",
                      synonyms: ["دفع فلوس", "دفع مال", "payment"],
                    },
                    "money transfer": {
                      code: "47",
                      synonyms: ["تحويل فلوس", "تحويل مال", "fund transfer"],
                    },
                    name: { code: "48", synonyms: ["اسم", "designation"] },
                    need: { code: "49", synonyms: ["يحتاج", "require"] },
                    new: { code: "50", synonyms: ["جديد", "recent"] },
                    number: { code: "51", synonyms: ["رقم", "figure"] },
                    ok: {
                      code: "52",
                      synonyms: ["تمام", "حسنا", "fine", "alright"],
                    },
                    on: { code: "53", synonyms: ["فوق", "على", "upon"] },
                    open: { code: "54", synonyms: ["فتح", "فتح", "unseal"] },
                    or: { code: "55", synonyms: ["او", "alternatively"] },
                    pension: {
                      code: "56",
                      synonyms: ["معاش", "retirement benefit"],
                    },
                    salary: { code: "57", synonyms: ["راتب", "wage"] },
                    signature: { code: "58", synonyms: ["توقيع", "autograph"] },
                    visa: { code: "59", synonyms: ["تأشيرة", "entry permit"] },
                    "wait move": {
                      code: "60",
                      synonyms: ["استنى", "انتظر", "hold on"],
                    },
                    what: { code: "61", synonyms: ["ايه", "ماذا", "what's"] },
                    yes: {
                      code: "62",
                      synonyms: ["ايوه", "صح", "نعم", "affirmative"],
                    },
                  };

                  message = message.trim().toLowerCase();

                  // Function to remove the 'ال' prefix if present
                  function removeAl(word) {
                    return word.startsWith("ال") ? word.slice(2) : word;
                  }

                  // Function to replace 'أ' with 'ا'
                  function replaceAlef(word) {
                    return word.replace(/أ/g, "ا");
                    return word.replace(/إ/g, "ا");
                  }

                  message = message
                    .split(" ")
                    .map((word) => replaceAlef(removeAl(word)))
                    .join(" ");

                  console.log(message);
                  var translations = [];

                  // Function to find the longest match for a given substring
                  function findLongestMatch(substring, wordMapping) {
                    let longestMatch = { key: null, length: 0 };
                    Object.keys(wordMapping).forEach((key) => {
                      if (
                        substring.startsWith(key.toLowerCase()) &&
                        key.length > longestMatch.length
                      ) {
                        longestMatch = { key, length: key.length };
                      } else {
                        wordMapping[key].synonyms.forEach((synonym) => {
                          if (
                            substring.startsWith(synonym.toLowerCase()) &&
                            synonym.length > longestMatch.length
                          ) {
                            longestMatch = { key, length: synonym.length };
                          }
                        });
                      }
                    });
                    return longestMatch.key;
                  }

                  // Tokenize and map to codes
                  while (message.length > 0) {
                    let match = findLongestMatch(message, wordMapping);
                    if (match) {
                      translations.push(wordMapping[match].code);
                      let matchedString = new RegExp(
                        `^(${match}|${wordMapping[match].synonyms.join("|")})`,
                        "i"
                      ).exec(message);
                      if (matchedString) {
                        message = message.slice(matchedString[0].length).trim();
                      } else {
                        // If no match is found, break the loop to avoid infinite loop
                        break;
                      }
                    } else {
                      // If no match, remove the first word (assuming words are separated by spaces)
                      message = message.replace(/^\S+\s*/, "").trim();
                    }
                  }

                  // Join the translations into a single string
                  var translationString = translations.join(",");

                  // Send the translation string to Unity
                  UnityInstance.SendMessage(
                    "Ch09_nonPBR",
                    "StartPlayAnimationSequence",
                    translationString
                  );

                  // Log the translations
                  console.log(translationString);
                }
              });
            })
            .catch((error) => {
              console.error("Failed to initialize Unity:", error);
            });
        };

        document.body.appendChild(script);
      }

      // Initialize Unity when DOM content is loaded
      document.addEventListener("DOMContentLoaded", initializeUnity);
    </script>
  </body>
</html>
