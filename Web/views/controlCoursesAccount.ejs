<!DOCTYPE html>
<html lang="en">
  <head>
    <meta charset="UTF-8" />
    <meta name="viewport" content="width=device-width, initial-scale=1.0" />
    <link rel="stylesheet" href="/css/all.min.css" />
    <link rel="stylesheet" href="/css/normalize.css" />
    <link rel="stylesheet" href="/css/master.css" />
    <link rel="stylesheet" href="/css/user-account-view.css" />
    <!-- Google Fonts -->
    <link rel="preconnect" href="https://fonts.googleapis.com" />
    <link rel="preconnect" href="https://fonts.gstatic.com" crossorigin />
    <link rel="preconnect" href="https://fonts.googleapis.com" />
    <link rel="preconnect" href="https://fonts.gstatic.com" crossorigin />
    <link rel="preconnect" href="https://fonts.googleapis.com" />
    <link rel="preconnect" href="https://fonts.gstatic.com" crossorigin />
    <link
      href="https://fonts.googleapis.com/css2?family=Open+Sans:wght@300;400;500;600;700;800&display=swap"
      rel="stylesheet"
    />
    <title>User Accounts</title>
  </head>
  <body>
    <div id="allAccounts"></div>
    <div class="modal-container" id="modal-add">
      <div class="modal">
        <button class="close-btn" id="close">
          <i class="fa-regular fa-circle-xmark"></i>
        </button>
        <div class="modal-header">
          <h3>Are you sure!</h3>
        </div>
        <div class="modal-content">
          <form class="form-input">
            <input type="password" placeholder="Enter your password" />
          </form>
          <input type="submit" value="Delete" class="submit-btn" />
        </div>
      </div>
    </div>
    <script>
      const close = document.getElementById("close");
      const modalAdd = document.getElementById("modal-add");

      // Retrieve user data from local storage
      const users = JSON.parse(localStorage.getItem("Users"));
      const usersView = document.getElementById("allAccounts");

      // Display user data
      if (users) {
        users.forEach((user, index) => {
          const accountElement = document.createElement("div");
          accountElement.classList.add("user-info");

          // Display user number
          const userNumber = document.createElement("h2");
          userNumber.textContent = `User ${index + 1}`;
          accountElement.appendChild(userNumber);

          // Display user properties
          for (const [key, value] of Object.entries(user)) {
            const propertyElement = document.createElement("div");
            propertyElement.classList.add(
              `user-property-${key.toLowerCase().replace(/\s/g, "-")}`
            );
            propertyElement.textContent = `${key}: ${value}`;
            accountElement.appendChild(propertyElement);
          }

          // Create button to delete account
          const deleteButton = document.createElement("button");
          deleteButton.textContent = "Delete Account";
          deleteButton.classList.add("del");
          deleteButton.id = "del";
          deleteButton.addEventListener("click", () => {});
          accountElement.appendChild(deleteButton);

          usersView.appendChild(accountElement);
        });
      } else {
        // Handle case when no user data is available
        usersView.textContent = "No user accounts available.";
      }

      const delButtons = document.querySelectorAll(".del");
      const avatarUrls = document.querySelectorAll(".user-property-avatarurl");

      avatarUrls.forEach((avatarUrl) => {
        const avatarUrlText = avatarUrl.textContent;
        const startIndex = avatarUrlText.indexOf("https://");
        if (startIndex !== -1) {
          // Extract the substring starting from the index of "https://"
          const text = avatarUrlText.substring(startIndex).trim();
          // while (avatarUrl.firstChild) {
          //   avatarUrl.removeChild(avatarUrl.firstChild);
          // }
          // const newDiv = document.createElement("div");
          // const newLink = document.createElement("a");
          // newLink.href = "Text";
          // newLink.textContent = "Avatar";
          // avatarUrl.appendChild(newLink);
          const newLink = `<div>Avatar URL: <a href="${text}">Avatar</a>`;

          // Set the innerHTML of the avatarUrl element to the new <a> tag
          avatarUrl.innerHTML = newLink;
        } else {
          console.log("URL not found.");
        }
      });

      // avatarUrls.classList.add("omar");

      // Function to  show modal
      const addModal = () => {
        modalAdd.classList.add("show-modal");
      };

      // Function to remove the "show-modal" class
      const closeModal = () => {
        modalAdd.classList.remove("show-modal");
      };

      // Attach the event listener to the "close" button for Add modal
      close.addEventListener("click", closeModal);

      // Attach the event listener to all buttons with the class "del"
      delButtons.forEach((button) => {
        button.addEventListener("click", addModal);
      });
      // Show Add modal
      // delButtons.addEventListener("click", addModal);
    </script>
  </body>
</html>
